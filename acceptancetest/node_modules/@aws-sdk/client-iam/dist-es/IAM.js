import { __extends } from "tslib";
import { AddClientIDToOpenIDConnectProviderCommand, } from "./commands/AddClientIDToOpenIDConnectProviderCommand";
import { AddRoleToInstanceProfileCommand, } from "./commands/AddRoleToInstanceProfileCommand";
import { AddUserToGroupCommand, } from "./commands/AddUserToGroupCommand";
import { AttachGroupPolicyCommand, } from "./commands/AttachGroupPolicyCommand";
import { AttachRolePolicyCommand, } from "./commands/AttachRolePolicyCommand";
import { AttachUserPolicyCommand, } from "./commands/AttachUserPolicyCommand";
import { ChangePasswordCommand, } from "./commands/ChangePasswordCommand";
import { CreateAccessKeyCommand, } from "./commands/CreateAccessKeyCommand";
import { CreateAccountAliasCommand, } from "./commands/CreateAccountAliasCommand";
import { CreateGroupCommand } from "./commands/CreateGroupCommand";
import { CreateInstanceProfileCommand, } from "./commands/CreateInstanceProfileCommand";
import { CreateLoginProfileCommand, } from "./commands/CreateLoginProfileCommand";
import { CreateOpenIDConnectProviderCommand, } from "./commands/CreateOpenIDConnectProviderCommand";
import { CreatePolicyCommand, } from "./commands/CreatePolicyCommand";
import { CreatePolicyVersionCommand, } from "./commands/CreatePolicyVersionCommand";
import { CreateRoleCommand } from "./commands/CreateRoleCommand";
import { CreateSAMLProviderCommand, } from "./commands/CreateSAMLProviderCommand";
import { CreateServiceLinkedRoleCommand, } from "./commands/CreateServiceLinkedRoleCommand";
import { CreateServiceSpecificCredentialCommand, } from "./commands/CreateServiceSpecificCredentialCommand";
import { CreateUserCommand } from "./commands/CreateUserCommand";
import { CreateVirtualMFADeviceCommand, } from "./commands/CreateVirtualMFADeviceCommand";
import { DeactivateMFADeviceCommand, } from "./commands/DeactivateMFADeviceCommand";
import { DeleteAccessKeyCommand, } from "./commands/DeleteAccessKeyCommand";
import { DeleteAccountAliasCommand, } from "./commands/DeleteAccountAliasCommand";
import { DeleteAccountPasswordPolicyCommand, } from "./commands/DeleteAccountPasswordPolicyCommand";
import { DeleteGroupCommand } from "./commands/DeleteGroupCommand";
import { DeleteGroupPolicyCommand, } from "./commands/DeleteGroupPolicyCommand";
import { DeleteInstanceProfileCommand, } from "./commands/DeleteInstanceProfileCommand";
import { DeleteLoginProfileCommand, } from "./commands/DeleteLoginProfileCommand";
import { DeleteOpenIDConnectProviderCommand, } from "./commands/DeleteOpenIDConnectProviderCommand";
import { DeletePolicyCommand, } from "./commands/DeletePolicyCommand";
import { DeletePolicyVersionCommand, } from "./commands/DeletePolicyVersionCommand";
import { DeleteRoleCommand } from "./commands/DeleteRoleCommand";
import { DeleteRolePermissionsBoundaryCommand, } from "./commands/DeleteRolePermissionsBoundaryCommand";
import { DeleteRolePolicyCommand, } from "./commands/DeleteRolePolicyCommand";
import { DeleteSAMLProviderCommand, } from "./commands/DeleteSAMLProviderCommand";
import { DeleteServerCertificateCommand, } from "./commands/DeleteServerCertificateCommand";
import { DeleteServiceLinkedRoleCommand, } from "./commands/DeleteServiceLinkedRoleCommand";
import { DeleteServiceSpecificCredentialCommand, } from "./commands/DeleteServiceSpecificCredentialCommand";
import { DeleteSigningCertificateCommand, } from "./commands/DeleteSigningCertificateCommand";
import { DeleteSSHPublicKeyCommand, } from "./commands/DeleteSSHPublicKeyCommand";
import { DeleteUserCommand } from "./commands/DeleteUserCommand";
import { DeleteUserPermissionsBoundaryCommand, } from "./commands/DeleteUserPermissionsBoundaryCommand";
import { DeleteUserPolicyCommand, } from "./commands/DeleteUserPolicyCommand";
import { DeleteVirtualMFADeviceCommand, } from "./commands/DeleteVirtualMFADeviceCommand";
import { DetachGroupPolicyCommand, } from "./commands/DetachGroupPolicyCommand";
import { DetachRolePolicyCommand, } from "./commands/DetachRolePolicyCommand";
import { DetachUserPolicyCommand, } from "./commands/DetachUserPolicyCommand";
import { EnableMFADeviceCommand, } from "./commands/EnableMFADeviceCommand";
import { GenerateCredentialReportCommand, } from "./commands/GenerateCredentialReportCommand";
import { GenerateOrganizationsAccessReportCommand, } from "./commands/GenerateOrganizationsAccessReportCommand";
import { GenerateServiceLastAccessedDetailsCommand, } from "./commands/GenerateServiceLastAccessedDetailsCommand";
import { GetAccessKeyLastUsedCommand, } from "./commands/GetAccessKeyLastUsedCommand";
import { GetAccountAuthorizationDetailsCommand, } from "./commands/GetAccountAuthorizationDetailsCommand";
import { GetAccountPasswordPolicyCommand, } from "./commands/GetAccountPasswordPolicyCommand";
import { GetAccountSummaryCommand, } from "./commands/GetAccountSummaryCommand";
import { GetContextKeysForCustomPolicyCommand, } from "./commands/GetContextKeysForCustomPolicyCommand";
import { GetContextKeysForPrincipalPolicyCommand, } from "./commands/GetContextKeysForPrincipalPolicyCommand";
import { GetCredentialReportCommand, } from "./commands/GetCredentialReportCommand";
import { GetGroupCommand } from "./commands/GetGroupCommand";
import { GetGroupPolicyCommand, } from "./commands/GetGroupPolicyCommand";
import { GetInstanceProfileCommand, } from "./commands/GetInstanceProfileCommand";
import { GetLoginProfileCommand, } from "./commands/GetLoginProfileCommand";
import { GetOpenIDConnectProviderCommand, } from "./commands/GetOpenIDConnectProviderCommand";
import { GetOrganizationsAccessReportCommand, } from "./commands/GetOrganizationsAccessReportCommand";
import { GetPolicyCommand } from "./commands/GetPolicyCommand";
import { GetPolicyVersionCommand, } from "./commands/GetPolicyVersionCommand";
import { GetRoleCommand } from "./commands/GetRoleCommand";
import { GetRolePolicyCommand, } from "./commands/GetRolePolicyCommand";
import { GetSAMLProviderCommand, } from "./commands/GetSAMLProviderCommand";
import { GetServerCertificateCommand, } from "./commands/GetServerCertificateCommand";
import { GetServiceLastAccessedDetailsCommand, } from "./commands/GetServiceLastAccessedDetailsCommand";
import { GetServiceLastAccessedDetailsWithEntitiesCommand, } from "./commands/GetServiceLastAccessedDetailsWithEntitiesCommand";
import { GetServiceLinkedRoleDeletionStatusCommand, } from "./commands/GetServiceLinkedRoleDeletionStatusCommand";
import { GetSSHPublicKeyCommand, } from "./commands/GetSSHPublicKeyCommand";
import { GetUserCommand } from "./commands/GetUserCommand";
import { GetUserPolicyCommand, } from "./commands/GetUserPolicyCommand";
import { ListAccessKeysCommand, } from "./commands/ListAccessKeysCommand";
import { ListAccountAliasesCommand, } from "./commands/ListAccountAliasesCommand";
import { ListAttachedGroupPoliciesCommand, } from "./commands/ListAttachedGroupPoliciesCommand";
import { ListAttachedRolePoliciesCommand, } from "./commands/ListAttachedRolePoliciesCommand";
import { ListAttachedUserPoliciesCommand, } from "./commands/ListAttachedUserPoliciesCommand";
import { ListEntitiesForPolicyCommand, } from "./commands/ListEntitiesForPolicyCommand";
import { ListGroupPoliciesCommand, } from "./commands/ListGroupPoliciesCommand";
import { ListGroupsCommand } from "./commands/ListGroupsCommand";
import { ListGroupsForUserCommand, } from "./commands/ListGroupsForUserCommand";
import { ListInstanceProfilesCommand, } from "./commands/ListInstanceProfilesCommand";
import { ListInstanceProfilesForRoleCommand, } from "./commands/ListInstanceProfilesForRoleCommand";
import { ListInstanceProfileTagsCommand, } from "./commands/ListInstanceProfileTagsCommand";
import { ListMFADevicesCommand, } from "./commands/ListMFADevicesCommand";
import { ListMFADeviceTagsCommand, } from "./commands/ListMFADeviceTagsCommand";
import { ListOpenIDConnectProvidersCommand, } from "./commands/ListOpenIDConnectProvidersCommand";
import { ListOpenIDConnectProviderTagsCommand, } from "./commands/ListOpenIDConnectProviderTagsCommand";
import { ListPoliciesCommand, } from "./commands/ListPoliciesCommand";
import { ListPoliciesGrantingServiceAccessCommand, } from "./commands/ListPoliciesGrantingServiceAccessCommand";
import { ListPolicyTagsCommand, } from "./commands/ListPolicyTagsCommand";
import { ListPolicyVersionsCommand, } from "./commands/ListPolicyVersionsCommand";
import { ListRolePoliciesCommand, } from "./commands/ListRolePoliciesCommand";
import { ListRolesCommand } from "./commands/ListRolesCommand";
import { ListRoleTagsCommand, } from "./commands/ListRoleTagsCommand";
import { ListSAMLProvidersCommand, } from "./commands/ListSAMLProvidersCommand";
import { ListSAMLProviderTagsCommand, } from "./commands/ListSAMLProviderTagsCommand";
import { ListServerCertificatesCommand, } from "./commands/ListServerCertificatesCommand";
import { ListServerCertificateTagsCommand, } from "./commands/ListServerCertificateTagsCommand";
import { ListServiceSpecificCredentialsCommand, } from "./commands/ListServiceSpecificCredentialsCommand";
import { ListSigningCertificatesCommand, } from "./commands/ListSigningCertificatesCommand";
import { ListSSHPublicKeysCommand, } from "./commands/ListSSHPublicKeysCommand";
import { ListUserPoliciesCommand, } from "./commands/ListUserPoliciesCommand";
import { ListUsersCommand } from "./commands/ListUsersCommand";
import { ListUserTagsCommand, } from "./commands/ListUserTagsCommand";
import { ListVirtualMFADevicesCommand, } from "./commands/ListVirtualMFADevicesCommand";
import { PutGroupPolicyCommand, } from "./commands/PutGroupPolicyCommand";
import { PutRolePermissionsBoundaryCommand, } from "./commands/PutRolePermissionsBoundaryCommand";
import { PutRolePolicyCommand, } from "./commands/PutRolePolicyCommand";
import { PutUserPermissionsBoundaryCommand, } from "./commands/PutUserPermissionsBoundaryCommand";
import { PutUserPolicyCommand, } from "./commands/PutUserPolicyCommand";
import { RemoveClientIDFromOpenIDConnectProviderCommand, } from "./commands/RemoveClientIDFromOpenIDConnectProviderCommand";
import { RemoveRoleFromInstanceProfileCommand, } from "./commands/RemoveRoleFromInstanceProfileCommand";
import { RemoveUserFromGroupCommand, } from "./commands/RemoveUserFromGroupCommand";
import { ResetServiceSpecificCredentialCommand, } from "./commands/ResetServiceSpecificCredentialCommand";
import { ResyncMFADeviceCommand, } from "./commands/ResyncMFADeviceCommand";
import { SetDefaultPolicyVersionCommand, } from "./commands/SetDefaultPolicyVersionCommand";
import { SetSecurityTokenServicePreferencesCommand, } from "./commands/SetSecurityTokenServicePreferencesCommand";
import { SimulateCustomPolicyCommand, } from "./commands/SimulateCustomPolicyCommand";
import { SimulatePrincipalPolicyCommand, } from "./commands/SimulatePrincipalPolicyCommand";
import { TagInstanceProfileCommand, } from "./commands/TagInstanceProfileCommand";
import { TagMFADeviceCommand, } from "./commands/TagMFADeviceCommand";
import { TagOpenIDConnectProviderCommand, } from "./commands/TagOpenIDConnectProviderCommand";
import { TagPolicyCommand } from "./commands/TagPolicyCommand";
import { TagRoleCommand } from "./commands/TagRoleCommand";
import { TagSAMLProviderCommand, } from "./commands/TagSAMLProviderCommand";
import { TagServerCertificateCommand, } from "./commands/TagServerCertificateCommand";
import { TagUserCommand } from "./commands/TagUserCommand";
import { UntagInstanceProfileCommand, } from "./commands/UntagInstanceProfileCommand";
import { UntagMFADeviceCommand, } from "./commands/UntagMFADeviceCommand";
import { UntagOpenIDConnectProviderCommand, } from "./commands/UntagOpenIDConnectProviderCommand";
import { UntagPolicyCommand } from "./commands/UntagPolicyCommand";
import { UntagRoleCommand } from "./commands/UntagRoleCommand";
import { UntagSAMLProviderCommand, } from "./commands/UntagSAMLProviderCommand";
import { UntagServerCertificateCommand, } from "./commands/UntagServerCertificateCommand";
import { UntagUserCommand } from "./commands/UntagUserCommand";
import { UpdateAccessKeyCommand, } from "./commands/UpdateAccessKeyCommand";
import { UpdateAccountPasswordPolicyCommand, } from "./commands/UpdateAccountPasswordPolicyCommand";
import { UpdateAssumeRolePolicyCommand, } from "./commands/UpdateAssumeRolePolicyCommand";
import { UpdateGroupCommand } from "./commands/UpdateGroupCommand";
import { UpdateLoginProfileCommand, } from "./commands/UpdateLoginProfileCommand";
import { UpdateOpenIDConnectProviderThumbprintCommand, } from "./commands/UpdateOpenIDConnectProviderThumbprintCommand";
import { UpdateRoleCommand } from "./commands/UpdateRoleCommand";
import { UpdateRoleDescriptionCommand, } from "./commands/UpdateRoleDescriptionCommand";
import { UpdateSAMLProviderCommand, } from "./commands/UpdateSAMLProviderCommand";
import { UpdateServerCertificateCommand, } from "./commands/UpdateServerCertificateCommand";
import { UpdateServiceSpecificCredentialCommand, } from "./commands/UpdateServiceSpecificCredentialCommand";
import { UpdateSigningCertificateCommand, } from "./commands/UpdateSigningCertificateCommand";
import { UpdateSSHPublicKeyCommand, } from "./commands/UpdateSSHPublicKeyCommand";
import { UpdateUserCommand } from "./commands/UpdateUserCommand";
import { UploadServerCertificateCommand, } from "./commands/UploadServerCertificateCommand";
import { UploadSigningCertificateCommand, } from "./commands/UploadSigningCertificateCommand";
import { UploadSSHPublicKeyCommand, } from "./commands/UploadSSHPublicKeyCommand";
import { IAMClient } from "./IAMClient";
var IAM = (function (_super) {
    __extends(IAM, _super);
    function IAM() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IAM.prototype.addClientIDToOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new AddClientIDToOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.addRoleToInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new AddRoleToInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.addUserToGroup = function (args, optionsOrCb, cb) {
        var command = new AddUserToGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.attachGroupPolicy = function (args, optionsOrCb, cb) {
        var command = new AttachGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.attachRolePolicy = function (args, optionsOrCb, cb) {
        var command = new AttachRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.attachUserPolicy = function (args, optionsOrCb, cb) {
        var command = new AttachUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.changePassword = function (args, optionsOrCb, cb) {
        var command = new ChangePasswordCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createAccessKey = function (args, optionsOrCb, cb) {
        var command = new CreateAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createAccountAlias = function (args, optionsOrCb, cb) {
        var command = new CreateAccountAliasCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createGroup = function (args, optionsOrCb, cb) {
        var command = new CreateGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new CreateInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createLoginProfile = function (args, optionsOrCb, cb) {
        var command = new CreateLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new CreateOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createPolicy = function (args, optionsOrCb, cb) {
        var command = new CreatePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createPolicyVersion = function (args, optionsOrCb, cb) {
        var command = new CreatePolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createRole = function (args, optionsOrCb, cb) {
        var command = new CreateRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new CreateSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createServiceLinkedRole = function (args, optionsOrCb, cb) {
        var command = new CreateServiceLinkedRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createServiceSpecificCredential = function (args, optionsOrCb, cb) {
        var command = new CreateServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createUser = function (args, optionsOrCb, cb) {
        var command = new CreateUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.createVirtualMFADevice = function (args, optionsOrCb, cb) {
        var command = new CreateVirtualMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deactivateMFADevice = function (args, optionsOrCb, cb) {
        var command = new DeactivateMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteAccessKey = function (args, optionsOrCb, cb) {
        var command = new DeleteAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteAccountAlias = function (args, optionsOrCb, cb) {
        var command = new DeleteAccountAliasCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteAccountPasswordPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteGroupPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new DeleteInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteLoginProfile = function (args, optionsOrCb, cb) {
        var command = new DeleteLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new DeleteOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deletePolicy = function (args, optionsOrCb, cb) {
        var command = new DeletePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deletePolicyVersion = function (args, optionsOrCb, cb) {
        var command = new DeletePolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteRole = function (args, optionsOrCb, cb) {
        var command = new DeleteRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteRolePermissionsBoundary = function (args, optionsOrCb, cb) {
        var command = new DeleteRolePermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteRolePolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new DeleteSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteServerCertificate = function (args, optionsOrCb, cb) {
        var command = new DeleteServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteServiceLinkedRole = function (args, optionsOrCb, cb) {
        var command = new DeleteServiceLinkedRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteServiceSpecificCredential = function (args, optionsOrCb, cb) {
        var command = new DeleteServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteSigningCertificate = function (args, optionsOrCb, cb) {
        var command = new DeleteSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteSSHPublicKey = function (args, optionsOrCb, cb) {
        var command = new DeleteSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteUser = function (args, optionsOrCb, cb) {
        var command = new DeleteUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteUserPermissionsBoundary = function (args, optionsOrCb, cb) {
        var command = new DeleteUserPermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteUserPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.deleteVirtualMFADevice = function (args, optionsOrCb, cb) {
        var command = new DeleteVirtualMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.detachGroupPolicy = function (args, optionsOrCb, cb) {
        var command = new DetachGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.detachRolePolicy = function (args, optionsOrCb, cb) {
        var command = new DetachRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.detachUserPolicy = function (args, optionsOrCb, cb) {
        var command = new DetachUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.enableMFADevice = function (args, optionsOrCb, cb) {
        var command = new EnableMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.generateCredentialReport = function (args, optionsOrCb, cb) {
        var command = new GenerateCredentialReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.generateOrganizationsAccessReport = function (args, optionsOrCb, cb) {
        var command = new GenerateOrganizationsAccessReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.generateServiceLastAccessedDetails = function (args, optionsOrCb, cb) {
        var command = new GenerateServiceLastAccessedDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getAccessKeyLastUsed = function (args, optionsOrCb, cb) {
        var command = new GetAccessKeyLastUsedCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getAccountAuthorizationDetails = function (args, optionsOrCb, cb) {
        var command = new GetAccountAuthorizationDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getAccountPasswordPolicy = function (args, optionsOrCb, cb) {
        var command = new GetAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getAccountSummary = function (args, optionsOrCb, cb) {
        var command = new GetAccountSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getContextKeysForCustomPolicy = function (args, optionsOrCb, cb) {
        var command = new GetContextKeysForCustomPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getContextKeysForPrincipalPolicy = function (args, optionsOrCb, cb) {
        var command = new GetContextKeysForPrincipalPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getCredentialReport = function (args, optionsOrCb, cb) {
        var command = new GetCredentialReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getGroup = function (args, optionsOrCb, cb) {
        var command = new GetGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getGroupPolicy = function (args, optionsOrCb, cb) {
        var command = new GetGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new GetInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getLoginProfile = function (args, optionsOrCb, cb) {
        var command = new GetLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new GetOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getOrganizationsAccessReport = function (args, optionsOrCb, cb) {
        var command = new GetOrganizationsAccessReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getPolicy = function (args, optionsOrCb, cb) {
        var command = new GetPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getPolicyVersion = function (args, optionsOrCb, cb) {
        var command = new GetPolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getRole = function (args, optionsOrCb, cb) {
        var command = new GetRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getRolePolicy = function (args, optionsOrCb, cb) {
        var command = new GetRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new GetSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getServerCertificate = function (args, optionsOrCb, cb) {
        var command = new GetServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getServiceLastAccessedDetails = function (args, optionsOrCb, cb) {
        var command = new GetServiceLastAccessedDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getServiceLastAccessedDetailsWithEntities = function (args, optionsOrCb, cb) {
        var command = new GetServiceLastAccessedDetailsWithEntitiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getServiceLinkedRoleDeletionStatus = function (args, optionsOrCb, cb) {
        var command = new GetServiceLinkedRoleDeletionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getSSHPublicKey = function (args, optionsOrCb, cb) {
        var command = new GetSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getUser = function (args, optionsOrCb, cb) {
        var command = new GetUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.getUserPolicy = function (args, optionsOrCb, cb) {
        var command = new GetUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listAccessKeys = function (args, optionsOrCb, cb) {
        var command = new ListAccessKeysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listAccountAliases = function (args, optionsOrCb, cb) {
        var command = new ListAccountAliasesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listAttachedGroupPolicies = function (args, optionsOrCb, cb) {
        var command = new ListAttachedGroupPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listAttachedRolePolicies = function (args, optionsOrCb, cb) {
        var command = new ListAttachedRolePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listAttachedUserPolicies = function (args, optionsOrCb, cb) {
        var command = new ListAttachedUserPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listEntitiesForPolicy = function (args, optionsOrCb, cb) {
        var command = new ListEntitiesForPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listGroupPolicies = function (args, optionsOrCb, cb) {
        var command = new ListGroupPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listGroups = function (args, optionsOrCb, cb) {
        var command = new ListGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listGroupsForUser = function (args, optionsOrCb, cb) {
        var command = new ListGroupsForUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listInstanceProfiles = function (args, optionsOrCb, cb) {
        var command = new ListInstanceProfilesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listInstanceProfilesForRole = function (args, optionsOrCb, cb) {
        var command = new ListInstanceProfilesForRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listInstanceProfileTags = function (args, optionsOrCb, cb) {
        var command = new ListInstanceProfileTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listMFADevices = function (args, optionsOrCb, cb) {
        var command = new ListMFADevicesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listMFADeviceTags = function (args, optionsOrCb, cb) {
        var command = new ListMFADeviceTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listOpenIDConnectProviders = function (args, optionsOrCb, cb) {
        var command = new ListOpenIDConnectProvidersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listOpenIDConnectProviderTags = function (args, optionsOrCb, cb) {
        var command = new ListOpenIDConnectProviderTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listPolicies = function (args, optionsOrCb, cb) {
        var command = new ListPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listPoliciesGrantingServiceAccess = function (args, optionsOrCb, cb) {
        var command = new ListPoliciesGrantingServiceAccessCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listPolicyTags = function (args, optionsOrCb, cb) {
        var command = new ListPolicyTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listPolicyVersions = function (args, optionsOrCb, cb) {
        var command = new ListPolicyVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listRolePolicies = function (args, optionsOrCb, cb) {
        var command = new ListRolePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listRoles = function (args, optionsOrCb, cb) {
        var command = new ListRolesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listRoleTags = function (args, optionsOrCb, cb) {
        var command = new ListRoleTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listSAMLProviders = function (args, optionsOrCb, cb) {
        var command = new ListSAMLProvidersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listSAMLProviderTags = function (args, optionsOrCb, cb) {
        var command = new ListSAMLProviderTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listServerCertificates = function (args, optionsOrCb, cb) {
        var command = new ListServerCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listServerCertificateTags = function (args, optionsOrCb, cb) {
        var command = new ListServerCertificateTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listServiceSpecificCredentials = function (args, optionsOrCb, cb) {
        var command = new ListServiceSpecificCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listSigningCertificates = function (args, optionsOrCb, cb) {
        var command = new ListSigningCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listSSHPublicKeys = function (args, optionsOrCb, cb) {
        var command = new ListSSHPublicKeysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listUserPolicies = function (args, optionsOrCb, cb) {
        var command = new ListUserPoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listUsers = function (args, optionsOrCb, cb) {
        var command = new ListUsersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listUserTags = function (args, optionsOrCb, cb) {
        var command = new ListUserTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.listVirtualMFADevices = function (args, optionsOrCb, cb) {
        var command = new ListVirtualMFADevicesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.putGroupPolicy = function (args, optionsOrCb, cb) {
        var command = new PutGroupPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.putRolePermissionsBoundary = function (args, optionsOrCb, cb) {
        var command = new PutRolePermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.putRolePolicy = function (args, optionsOrCb, cb) {
        var command = new PutRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.putUserPermissionsBoundary = function (args, optionsOrCb, cb) {
        var command = new PutUserPermissionsBoundaryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.putUserPolicy = function (args, optionsOrCb, cb) {
        var command = new PutUserPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.removeClientIDFromOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new RemoveClientIDFromOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.removeRoleFromInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new RemoveRoleFromInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.removeUserFromGroup = function (args, optionsOrCb, cb) {
        var command = new RemoveUserFromGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.resetServiceSpecificCredential = function (args, optionsOrCb, cb) {
        var command = new ResetServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.resyncMFADevice = function (args, optionsOrCb, cb) {
        var command = new ResyncMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.setDefaultPolicyVersion = function (args, optionsOrCb, cb) {
        var command = new SetDefaultPolicyVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.setSecurityTokenServicePreferences = function (args, optionsOrCb, cb) {
        var command = new SetSecurityTokenServicePreferencesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.simulateCustomPolicy = function (args, optionsOrCb, cb) {
        var command = new SimulateCustomPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.simulatePrincipalPolicy = function (args, optionsOrCb, cb) {
        var command = new SimulatePrincipalPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new TagInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagMFADevice = function (args, optionsOrCb, cb) {
        var command = new TagMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new TagOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagPolicy = function (args, optionsOrCb, cb) {
        var command = new TagPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagRole = function (args, optionsOrCb, cb) {
        var command = new TagRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new TagSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagServerCertificate = function (args, optionsOrCb, cb) {
        var command = new TagServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.tagUser = function (args, optionsOrCb, cb) {
        var command = new TagUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagInstanceProfile = function (args, optionsOrCb, cb) {
        var command = new UntagInstanceProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagMFADevice = function (args, optionsOrCb, cb) {
        var command = new UntagMFADeviceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagOpenIDConnectProvider = function (args, optionsOrCb, cb) {
        var command = new UntagOpenIDConnectProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagPolicy = function (args, optionsOrCb, cb) {
        var command = new UntagPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagRole = function (args, optionsOrCb, cb) {
        var command = new UntagRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new UntagSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagServerCertificate = function (args, optionsOrCb, cb) {
        var command = new UntagServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.untagUser = function (args, optionsOrCb, cb) {
        var command = new UntagUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateAccessKey = function (args, optionsOrCb, cb) {
        var command = new UpdateAccessKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateAccountPasswordPolicy = function (args, optionsOrCb, cb) {
        var command = new UpdateAccountPasswordPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateAssumeRolePolicy = function (args, optionsOrCb, cb) {
        var command = new UpdateAssumeRolePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateGroup = function (args, optionsOrCb, cb) {
        var command = new UpdateGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateLoginProfile = function (args, optionsOrCb, cb) {
        var command = new UpdateLoginProfileCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateOpenIDConnectProviderThumbprint = function (args, optionsOrCb, cb) {
        var command = new UpdateOpenIDConnectProviderThumbprintCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateRole = function (args, optionsOrCb, cb) {
        var command = new UpdateRoleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateRoleDescription = function (args, optionsOrCb, cb) {
        var command = new UpdateRoleDescriptionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateSAMLProvider = function (args, optionsOrCb, cb) {
        var command = new UpdateSAMLProviderCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateServerCertificate = function (args, optionsOrCb, cb) {
        var command = new UpdateServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateServiceSpecificCredential = function (args, optionsOrCb, cb) {
        var command = new UpdateServiceSpecificCredentialCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateSigningCertificate = function (args, optionsOrCb, cb) {
        var command = new UpdateSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateSSHPublicKey = function (args, optionsOrCb, cb) {
        var command = new UpdateSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.updateUser = function (args, optionsOrCb, cb) {
        var command = new UpdateUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.uploadServerCertificate = function (args, optionsOrCb, cb) {
        var command = new UploadServerCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.uploadSigningCertificate = function (args, optionsOrCb, cb) {
        var command = new UploadSigningCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    IAM.prototype.uploadSSHPublicKey = function (args, optionsOrCb, cb) {
        var command = new UploadSSHPublicKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return IAM;
}(IAMClient));
export { IAM };
