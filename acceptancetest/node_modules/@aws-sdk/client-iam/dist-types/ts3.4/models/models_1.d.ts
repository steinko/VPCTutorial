import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";
import { Role, ServerCertificateMetadata, SigningCertificate, SSHPublicKey, StatusType, Tag } from "./models_0";
export interface UntagPolicyRequest {
    
    PolicyArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagPolicyRequest {
    
    const filterSensitiveLog: (obj: UntagPolicyRequest) => any;
}
export interface UntagRoleRequest {
    
    RoleName: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagRoleRequest {
    
    const filterSensitiveLog: (obj: UntagRoleRequest) => any;
}
export interface UntagSAMLProviderRequest {
    
    SAMLProviderArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagSAMLProviderRequest {
    
    const filterSensitiveLog: (obj: UntagSAMLProviderRequest) => any;
}
export interface UntagServerCertificateRequest {
    
    ServerCertificateName: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagServerCertificateRequest {
    
    const filterSensitiveLog: (obj: UntagServerCertificateRequest) => any;
}
export interface UntagUserRequest {
    
    UserName: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagUserRequest {
    
    const filterSensitiveLog: (obj: UntagUserRequest) => any;
}
export interface UpdateAccessKeyRequest {
    
    UserName?: string;
    
    AccessKeyId: string | undefined;
    
    Status: StatusType | string | undefined;
}
export declare namespace UpdateAccessKeyRequest {
    
    const filterSensitiveLog: (obj: UpdateAccessKeyRequest) => any;
}
export interface UpdateAccountPasswordPolicyRequest {
    
    MinimumPasswordLength?: number;
    
    RequireSymbols?: boolean;
    
    RequireNumbers?: boolean;
    
    RequireUppercaseCharacters?: boolean;
    
    RequireLowercaseCharacters?: boolean;
    
    AllowUsersToChangePassword?: boolean;
    
    MaxPasswordAge?: number;
    
    PasswordReusePrevention?: number;
    
    HardExpiry?: boolean;
}
export declare namespace UpdateAccountPasswordPolicyRequest {
    
    const filterSensitiveLog: (obj: UpdateAccountPasswordPolicyRequest) => any;
}
export interface UpdateAssumeRolePolicyRequest {
    
    RoleName: string | undefined;
    
    PolicyDocument: string | undefined;
}
export declare namespace UpdateAssumeRolePolicyRequest {
    
    const filterSensitiveLog: (obj: UpdateAssumeRolePolicyRequest) => any;
}
export interface UpdateGroupRequest {
    
    GroupName: string | undefined;
    
    NewPath?: string;
    
    NewGroupName?: string;
}
export declare namespace UpdateGroupRequest {
    
    const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
}
export interface UpdateLoginProfileRequest {
    
    UserName: string | undefined;
    
    Password?: string;
    
    PasswordResetRequired?: boolean;
}
export declare namespace UpdateLoginProfileRequest {
    
    const filterSensitiveLog: (obj: UpdateLoginProfileRequest) => any;
}
export interface UpdateOpenIDConnectProviderThumbprintRequest {
    
    OpenIDConnectProviderArn: string | undefined;
    
    ThumbprintList: string[] | undefined;
}
export declare namespace UpdateOpenIDConnectProviderThumbprintRequest {
    
    const filterSensitiveLog: (obj: UpdateOpenIDConnectProviderThumbprintRequest) => any;
}
export interface UpdateRoleRequest {
    
    RoleName: string | undefined;
    
    Description?: string;
    
    MaxSessionDuration?: number;
}
export declare namespace UpdateRoleRequest {
    
    const filterSensitiveLog: (obj: UpdateRoleRequest) => any;
}
export interface UpdateRoleResponse {
}
export declare namespace UpdateRoleResponse {
    
    const filterSensitiveLog: (obj: UpdateRoleResponse) => any;
}
export interface UpdateRoleDescriptionRequest {
    
    RoleName: string | undefined;
    
    Description: string | undefined;
}
export declare namespace UpdateRoleDescriptionRequest {
    
    const filterSensitiveLog: (obj: UpdateRoleDescriptionRequest) => any;
}
export interface UpdateRoleDescriptionResponse {
    
    Role?: Role;
}
export declare namespace UpdateRoleDescriptionResponse {
    
    const filterSensitiveLog: (obj: UpdateRoleDescriptionResponse) => any;
}
export interface UpdateSAMLProviderRequest {
    
    SAMLMetadataDocument: string | undefined;
    
    SAMLProviderArn: string | undefined;
}
export declare namespace UpdateSAMLProviderRequest {
    
    const filterSensitiveLog: (obj: UpdateSAMLProviderRequest) => any;
}

export interface UpdateSAMLProviderResponse {
    
    SAMLProviderArn?: string;
}
export declare namespace UpdateSAMLProviderResponse {
    
    const filterSensitiveLog: (obj: UpdateSAMLProviderResponse) => any;
}
export interface UpdateServerCertificateRequest {
    
    ServerCertificateName: string | undefined;
    
    NewPath?: string;
    
    NewServerCertificateName?: string;
}
export declare namespace UpdateServerCertificateRequest {
    
    const filterSensitiveLog: (obj: UpdateServerCertificateRequest) => any;
}
export interface UpdateServiceSpecificCredentialRequest {
    
    UserName?: string;
    
    ServiceSpecificCredentialId: string | undefined;
    
    Status: StatusType | string | undefined;
}
export declare namespace UpdateServiceSpecificCredentialRequest {
    
    const filterSensitiveLog: (obj: UpdateServiceSpecificCredentialRequest) => any;
}
export interface UpdateSigningCertificateRequest {
    
    UserName?: string;
    
    CertificateId: string | undefined;
    
    Status: StatusType | string | undefined;
}
export declare namespace UpdateSigningCertificateRequest {
    
    const filterSensitiveLog: (obj: UpdateSigningCertificateRequest) => any;
}
export interface UpdateSSHPublicKeyRequest {
    
    UserName: string | undefined;
    
    SSHPublicKeyId: string | undefined;
    
    Status: StatusType | string | undefined;
}
export declare namespace UpdateSSHPublicKeyRequest {
    
    const filterSensitiveLog: (obj: UpdateSSHPublicKeyRequest) => any;
}
export interface UpdateUserRequest {
    
    UserName: string | undefined;
    
    NewPath?: string;
    
    NewUserName?: string;
}
export declare namespace UpdateUserRequest {
    
    const filterSensitiveLog: (obj: UpdateUserRequest) => any;
}

export interface KeyPairMismatchException extends __SmithyException, $MetadataBearer {
    name: "KeyPairMismatchException";
    $fault: "client";
    message?: string;
}
export declare namespace KeyPairMismatchException {
    
    const filterSensitiveLog: (obj: KeyPairMismatchException) => any;
}

export interface MalformedCertificateException extends __SmithyException, $MetadataBearer {
    name: "MalformedCertificateException";
    $fault: "client";
    message?: string;
}
export declare namespace MalformedCertificateException {
    
    const filterSensitiveLog: (obj: MalformedCertificateException) => any;
}
export interface UploadServerCertificateRequest {
    
    Path?: string;
    
    ServerCertificateName: string | undefined;
    
    CertificateBody: string | undefined;
    
    PrivateKey: string | undefined;
    
    CertificateChain?: string;
    
    Tags?: Tag[];
}
export declare namespace UploadServerCertificateRequest {
    
    const filterSensitiveLog: (obj: UploadServerCertificateRequest) => any;
}

export interface UploadServerCertificateResponse {
    
    ServerCertificateMetadata?: ServerCertificateMetadata;
    
    Tags?: Tag[];
}
export declare namespace UploadServerCertificateResponse {
    
    const filterSensitiveLog: (obj: UploadServerCertificateResponse) => any;
}

export interface DuplicateCertificateException extends __SmithyException, $MetadataBearer {
    name: "DuplicateCertificateException";
    $fault: "client";
    message?: string;
}
export declare namespace DuplicateCertificateException {
    
    const filterSensitiveLog: (obj: DuplicateCertificateException) => any;
}

export interface InvalidCertificateException extends __SmithyException, $MetadataBearer {
    name: "InvalidCertificateException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidCertificateException {
    
    const filterSensitiveLog: (obj: InvalidCertificateException) => any;
}
export interface UploadSigningCertificateRequest {
    
    UserName?: string;
    
    CertificateBody: string | undefined;
}
export declare namespace UploadSigningCertificateRequest {
    
    const filterSensitiveLog: (obj: UploadSigningCertificateRequest) => any;
}

export interface UploadSigningCertificateResponse {
    
    Certificate: SigningCertificate | undefined;
}
export declare namespace UploadSigningCertificateResponse {
    
    const filterSensitiveLog: (obj: UploadSigningCertificateResponse) => any;
}

export interface DuplicateSSHPublicKeyException extends __SmithyException, $MetadataBearer {
    name: "DuplicateSSHPublicKeyException";
    $fault: "client";
    message?: string;
}
export declare namespace DuplicateSSHPublicKeyException {
    
    const filterSensitiveLog: (obj: DuplicateSSHPublicKeyException) => any;
}

export interface InvalidPublicKeyException extends __SmithyException, $MetadataBearer {
    name: "InvalidPublicKeyException";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidPublicKeyException {
    
    const filterSensitiveLog: (obj: InvalidPublicKeyException) => any;
}
export interface UploadSSHPublicKeyRequest {
    
    UserName: string | undefined;
    
    SSHPublicKeyBody: string | undefined;
}
export declare namespace UploadSSHPublicKeyRequest {
    
    const filterSensitiveLog: (obj: UploadSSHPublicKeyRequest) => any;
}

export interface UploadSSHPublicKeyResponse {
    
    SSHPublicKey?: SSHPublicKey;
}
export declare namespace UploadSSHPublicKeyResponse {
    
    const filterSensitiveLog: (obj: UploadSSHPublicKeyResponse) => any;
}
